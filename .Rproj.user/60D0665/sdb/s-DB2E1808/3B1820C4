{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\n#Built heavily upon https://github.com/rstudio/shiny-examples/tree/master/060-retirement-simulation\nlibrary(shiny)\n\nparamNames <- c(\"n_pairs\", \"ave_wear_days\", \"wear_var\",\n                \"death_chance\", \"n_sim\")\n\n# Define server logic required to generate and plot a random distribution\n#\n# Idea and original code by Pierre Chretien\n# Small updates by Michael Kapler\n#\nshinyServer(function(input, output, session) {\n  getParams <- function() {\n    \n    params <- lapply(paramNames, function(p) {\n      input[[p]]\n    })\n    names(params) <- paramNames\n    params\n  }\n  \n  # Function that generates scenarios and computes NAV. The expression\n  # is wrapped in a call to reactive to indicate that:\n  #\n  #  1) It is \"reactive\" and therefore should be automatically\n  #     re-executed when inputs change\n  #\n  run_sock <- reactive(do.call(simulate_sock, getParams()))\n  \n  # Expression that plot NAV paths. The expression\n  # is wrapped in a call to renderPlot to indicate that:\n  #\n  #  1) It is \"reactive\" and therefore should be automatically\n  #     re-executed when inputs change\n  #  2) Its output type is a plot\n  #\n  output$distPlot <- renderPlot({\n    plot_sock(run_sock())\n  })\n\n  \n})\nsimulate_sock <- function(n_pairs = 10, ave_wear_days = 50,\n                         wear_var = 1, death_chance = 1, n_sim = 200) {\n  #-------------------------------------\n  # Inputs\n  #-------------------------------------\n  \n  # Number of pairs of socks in use\n  n.pairs = n_pairs\n  \n  # Average number of days you can wear a sock before it breaks\n  ave.wear.days = ave_wear_days\n  \n  # Variation in wear per day\n  wear.var = wear_var / 10\n  \n  # Chance of dieing per day worn\n  death.chance = death_chance / 100\n  \n  \n  # Number of simulated pairs\n  n.sim = n_sim\n  \n  \n  #-------------------------------------\n  # Simulation\n  #-------------------------------------\n  \n  # number of days to simulate\n  n.obs = 365\n  \n  # simulate Withdrawals\n  sock = matrix(ave.wear.days, n.obs + 1, n.sim)\n  for (n in 1:n.sim){\n    for (j in 1:n.obs) {\n      worn = NULL\n      random.n <- sample(1:n.pairs, 1)\n      if (random.n == 1){\n        worn <- 1\n      }else{\n        worn <- 0\n      }\n      death = NULL\n      random.n <- runif(1,0,1)\n      if (random.n <= death.chance){\n        death = 1\n      }else{\n        death = 0\n      }\n      wear = rnorm(1, 1, wear.var)\n      if (wear < 0){\n        wear = 0\n      }  \n      sock[j + 1, n] = sock[j, n] - (worn * wear) - (death * ave.wear.days)\n    }\n  }\n  \n  # once nav is below 0 => run out of money\n  sock[ sock <= 0 ] = NA\n  \n  \n  return(sock)\n}\n\nplot_sock <- function(sock) {\n  \n  layout(matrix(c(1,2,1,3),2,2))\n  \n  palette(c(\"black\", \"grey50\", \"grey30\", \"grey70\", \"#d9230f\"))\n  \n  # plot all scenarios\n  matplot(sock,\n          type = 'l', lwd = 0.5, lty = 1, col = 1:5,\n          xlab = 'Day', ylab = 'Days of wear left',\n          main = 'Declining sock health over time')\n  \n  # plot % of socks still alive\n  p.alive = 1 - rowSums(is.na(sock)) / ncol(sock)\n  \n  plot(100 * p.alive, las = 1, xlab = 'days', ylab = 'Percentage socks still running',\n       main = 'Percentage of socks still in use', ylim=c(0,100))\n  grid()\n  \n  # plot histogram of sock life\n  ages <- apply(is.na(sock),2,which.max)\n  ages[ ages == 1 ] = nrow(sock)\n  \n  \n  hist(ages, xlim=c(0,nrow(sock)), breaks = 25, slab = \"Age\", main = \"Age of death for socks\")\n\n}",
    "created" : 1448502371920.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3379239829",
    "id" : "3B1820C4",
    "lastKnownWriteTime" : 1448517639,
    "path" : "~/bin/socks/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}